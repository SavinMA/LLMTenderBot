import os
from documents_analyzer import DocumentsAnalyzer, AnalyzeResult
from config import MistralConfig
from ocr.mistral_ocr import MistralOCR
from prompts import Prompts
from queries import TenderData
from loguru import logger
import json
from mistralai import Mistral
from mistralai.models import File

class MistralAnalyzer(DocumentsAnalyzer):
    def __init__(self):
        super().__init__()
        self.llm_config = MistralConfig()

        self.model = self.llm_config.model
        self.client = Mistral(api_key=self.llm_config.api_key, timeout_ms=60000)
        self._check_api_key()

        self.ocr = MistralOCR()

    def _check_api_key(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞ Mistral."""
        if not self.llm_config.api_key:
            error_message = "‚ùå API –∫–ª—é—á Mistral –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è MISTRAL_API_KEY."
            logger.error(error_message)
            raise Exception(error_message)
        logger.info("‚úÖ API –∫–ª—é—á Mistral –Ω–∞–π–¥–µ–Ω.")
        return True

    def analyze(self, file_paths: list[str]) -> AnalyzeResult:
        file_errors = []
        summaries: list[TenderData] = []
        
        for file_path in file_paths:
            file_name = os.path.basename(file_path)
            try:
                summary: TenderData = self._analyze_file(file_path)
                summaries.append(summary)
            except Exception as e:
                file_errors.append(file_name)
        
        if file_errors:
            logger.error(f"‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {file_errors}")

        if summaries:
            global_summary = self._summarize_global(summaries)
        else:
            global_summary = None

        return AnalyzeResult(summary=global_summary, file_errors=file_errors)

    def _analyze_file(self, file_path: str) -> TenderData:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""
        file_extension = os.path.splitext(file_path)[1].lower()

        try:
            if file_extension in ['.docx', '.txt', '.pdf', '.doc']:
                return self._process_with_upload_file_and_chat(file_path)
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_extension}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            raise e
        
    def _process_with_upload_file_and_chat(self, file_path: str) -> TenderData:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Mistral –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —á–∞—Ç–∞"""
        logger.info(f"Processing with upload file and chat: {file_path}")
        file_id = None
        try:
            file_name = os.path.basename(file_path)

            with open(file_path, 'rb') as file:
                file_content = file.read()

            response = self.client.files.upload(
                file=File(
                    file_name=file_name,
                    content=file_content
                ),
                purpose="ocr"
            )
            file_id = response.id
            logger.debug(response)

            signed_url = self.client.files.get_signed_url(file_id=file_id)
            logger.debug(signed_url)

            messages = [
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": "–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É"
                        },
                        {
                            "type": "document_url",
                            "document_url": signed_url.url
                        }
                    ]
                }
            ]

            response = self.client.chat.parse(
                model=self.model,
                messages=messages,
                temperature=0.0,
                response_format=TenderData
            )
            logger.debug(response)
            return response.choices[0].message.parsed
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Mistral API –≤ _process_with_upload_file_and_chat: {e}")
            raise e
        finally:    
            if file_id:
                self.client.files.delete(file_id=file_id)

    def _summarize_global(self, summaries: list[TenderData]) -> str:
        logger.info("Starting global summarization.")

        # Parse and merge all TenderData objects
        if len(summaries) > 1:
            jsons = [tender_data.model_dump_json() for tender_data in summaries]
            summary_input_json = json.dumps(jsons)
        
            logger.debug(f"Summary input JSON: {summary_input_json}")
            # First LLM call for global summary
            logger.info("Calling LLM for global summary.")
            summary_result_prompt = Prompts.get_prompt_for_summarization(summary_input_json, "JSON")
            messages_global_summary = [
                {"role": "user", "content": summary_result_prompt}
            ]
            try:
                response_global_summary = self.client.chat.parse(
                    model=self.model,
                    messages=messages_global_summary,
                    temperature=0.0,
                    response_format=TenderData
                )
                global_summary_content = response_global_summary.choices[0].message.parsed
                logger.info("Global summary generated.")
                logger.debug(f"Global summary content: {global_summary_content}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Mistral API –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                return ""
        else:
            global_summary_content = summaries[0]

        telegram_markdown_content = self._create_telegram_message(global_summary_content)
        
        return telegram_markdown_content
    
    def _create_telegram_message(self, global_summary_content: TenderData) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message_parts = []

        if global_summary_content.procurement_name:
            message_parts.append(f"üì¶ *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏*: {global_summary_content.procurement_name}")
        if global_summary_content.customer_info_company_name:
            message_parts.append(f"üè¢ *–ó–∞–∫–∞–∑—á–∏–∫*: {global_summary_content.customer_info_company_name}")
        if global_summary_content.notice_number:
            message_parts.append(f"üìÑ *–ù–æ–º–µ—Ä –∏–∑–≤–µ—â–µ–Ω–∏—è*: {global_summary_content.notice_number}")
        if global_summary_content.publication_and_submission_deadline:
            message_parts.append(f"üóìÔ∏è *–°—Ä–æ–∫ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫*: {global_summary_content.publication_and_submission_deadline}")
        if global_summary_content.lots:
            lots_info = []
            for i, lot in enumerate(global_summary_content.lots):
                lot_details = []
                if lot.name:
                    lot_details.append(f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {lot.name}")
                if lot.initial_max_price:
                    lot_details.append(f"–ù–∞—á–∞–ª—å–Ω–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {lot.initial_max_price}")
                if lot.currency:
                    lot_details.append(f"–í–∞–ª—é—Ç–∞: {lot.currency}")
                if lot.quantity:
                    lot_details.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {lot.quantity}")
                if lot_details:
                    lots_info.append(f"–õ–æ—Ç {i+1}:
  - " + "\n  - ".join(lot_details))
            if lots_info:
                message_parts.append(f"üè∑Ô∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ—Ç–∞—Ö*:
" + "\n".join(lots_info))
        if global_summary_content.delivery_department:
            message_parts.append(f"üöö *–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏*: {global_summary_content.delivery_department}")
        if global_summary_content.initial_max_price_with_vat:
            message_parts.append(f"üí∞ *–ù–∞—á–∞–ª—å–Ω–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (—Å –ù–î–°)*: {global_summary_content.initial_max_price_with_vat}")
        if global_summary_content.contact_persons:
            contact_persons_info = []
            for person in global_summary_content.contact_persons:
                person_details = []
                if person.full_name:
                    person_details.append(f"–§–ò–û: {person.full_name}")
                if person.phone_number:
                    person_details.append(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {person.phone_number}")
                if person.email:
                    person_details.append(f"üìß Email: {person.email}")
                if person.position:
                    person_details.append(f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {person.position}")
                if person_details:
                    contact_persons_info.append("  - " + "\n    - ".join(person_details))
            if contact_persons_info:
                message_parts.append(f"üë§ *–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –ª–∏—Ü–∞*:
" + "\n".join(contact_persons_info))
        if global_summary_content.application_security:
            message_parts.append(f"üîê *–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏*: {global_summary_content.application_security}")
        if global_summary_content.re_bidding_date:
            message_parts.append(f"üîÑ *–î–∞—Ç–∞ –ø–µ—Ä–µ—Ç–æ—Ä–∂–∫–∏*: {global_summary_content.re_bidding_date}")
        if global_summary_content.etp_platform:
            message_parts.append(f"üåê *–≠–¢–ü*: {global_summary_content.etp_platform}")
        if global_summary_content.application_review_deadline:
            message_parts.append(f"üìÖ *–°—Ä–æ–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–æ–∫*: {global_summary_content.application_review_deadline}")
        if global_summary_content.results_summary_date:
            message_parts.append(f"üìä *–î–∞—Ç–∞ –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤*: {global_summary_content.results_summary_date}")
        if global_summary_content.contract_security:
            message_parts.append(f"üìú *–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞*: {global_summary_content.contract_security}")
        if global_summary_content.participation_price:
            message_parts.append(f"üí≤ *–¶–µ–Ω–∞ —É—á–∞—Å—Ç–∏—è*: {global_summary_content.participation_price}")
        if global_summary_content.warranty_requirements:
            message_parts.append(f"üõ†Ô∏è *–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è*: {global_summary_content.warranty_requirements}")
        if global_summary_content.required_delivery_period:
            message_parts.append(f"‚è±Ô∏è *–°—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏*: {global_summary_content.required_delivery_period}")
        if global_summary_content.payment_terms:
            message_parts.append(f"üí≥ *–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã*: {global_summary_content.payment_terms}")
        if global_summary_content.delivery_documents_names:
            message_parts.append(f"üìÑ *–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏*: {global_summary_content.delivery_documents_names}")
        if global_summary_content.delivery_method:
            message_parts.append(f"üì¶ *–ú–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏*: {global_summary_content.delivery_method}")
        if global_summary_content.product_dimensions:
            message_parts.append(f"üìè *–†–∞–∑–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–∞*: {global_summary_content.product_dimensions}")
        if global_summary_content.product_purpose:
            message_parts.append(f"üéØ *–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*: {global_summary_content.product_purpose}")
        if global_summary_content.contract_term:
            message_parts.append(f"üóìÔ∏è *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞*: {global_summary_content.contract_term}")
        if global_summary_content.delivery_address:
            message_parts.append(f"üìç *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏*: {global_summary_content.delivery_address}")
        
        telegram_markdown_content = "\n\n".join(message_parts)
        return telegram_markdown_content
        
        
        